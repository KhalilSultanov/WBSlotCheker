import logging
import asyncio
import time
import traceback

from aiogram import Bot, Dispatcher, types, BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import TELEGRAM_BOT_TOKEN
from utils import get_acceptance_coefficients

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.FileHandler("bot_errors.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç)
MAX_MESSAGE_LENGTH = 4000

# –°–ø–∏—Å–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
COEFFICIENTS = list(range(0, 21))  # –û—Ç 0 –¥–æ 20 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ALLOWED_USERS = [
    1391599879,
    466813055,
    1856114011,
    5495630544,
    893576709,
]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
WAREHOUSES = [
    {
        "ID": 2737, "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ (–£—Ç–∫–∏–Ω–∞ –ó–∞–≤–æ–¥—å)",
        "address": "–í—Å–µ–≤–æ–ª–æ–∂—Å–∫–∏–π —Ä-–Ω, –≥.–ø. –°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–æ–µ, –¥–µ—Ä. –ù–æ–≤–æ—Å–∞—Ä–∞—Ç–æ–≤–∫–∞, —É—á–∞—Å—Ç–æ–∫ ‚Ññ 1 (–ø—Ä–æ–º–∑–æ–Ω–∞ –£—Ç–∫–∏–Ω–∞ –ó–∞–≤–æ–¥—å, –∫–æ–º–ø–ª–µ–∫—Å –ú–õ–ü, –∫–æ—Ä–ø—É—Å 4, –ø–∞—Ä–∞–¥–Ω–∞—è 4)",
        "workTime": "24/7", "acceptsQR": True},
    {"ID": 117986, "name": "üì¶ –ö–∞–∑–∞–Ω—å",
     "address": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω, –ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –ø–∞—Ä–∫ –ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫, 20", "workTime": "24/7",
     "acceptsQR": False},
    {"ID": 208277, "name": "üì¶ –ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫", "address": "—É–ª. –¢–∏–º–∏—Ä—è–∑–µ–≤–∞ 16", "workTime": "24/7", "acceptsQR": True},
    {"ID": 507, "name": "üì¶ –ö–æ–ª–µ–¥–∏–Ω–æ", "address": "–¥–µ—Ä. –ö–æ–ª–µ–¥–∏–Ω–æ, —É–ª. –¢—Ä–æ–∏—Ü–∫–∞—è, 20", "workTime": "24/7",
     "acceptsQR": True},
    {"ID": 1733, "name": "üì¶ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ - –ò—Å–ø—ã—Ç–∞—Ç–µ–ª–µ–π 14–≥", "address": "—É–ª. –ò—Å–ø—ã—Ç–∞—Ç–µ–ª–µ–π, 14–ì", "workTime": "24/7",
     "acceptsQR": True},
    {"ID": 686, "name": "üì¶ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "address": "—É–ª. –ü–µ—Ç—É—Ö–æ–≤–∞, 71", "workTime": "24/7", "acceptsQR": False
     },
    {"ID": 206348, "name": "üì¶ –¢—É–ª–∞", "address": "–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ê–ª–µ–∫—Å–∏–Ω, 1",
     "workTime": "24/7", "acceptsQR": True}
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


class AuthorizationMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        user = data.get('event_from_user')
        if user is None:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –º–æ–∂–Ω–æ –ª–∏–±–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, –ª–∏–±–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å
            return await handler(event, data)

        user_id = user.id

        if user_id not in ALLOWED_USERS:
            if event.message:
                await event.message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            elif event.callback_query:
                await event.callback_query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True)
            return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

        return await handler(event, data)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
dp.update.middleware.register(AuthorizationMiddleware())


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–ª–∞–¥–æ–≤
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'selected_warehouses': [],
        'selected_coefficients': {},
        'known_coeffs': {},
        'last_message_id': None,
        'last_keyboard': None,
        'current_warehouse_index': 0,
        'setup_complete': False  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
    await send_warehouse_selection(chat_id, message)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤")]],
        resize_keyboard=True
    )
    await message.answer("üìã –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤:", reply_markup=confirm_keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
async def send_warehouse_selection(chat_id: int, message: types.Message):
    keyboard_builder = InlineKeyboardBuilder()

    for warehouse in WAREHOUSES:
        action_text = "‚ùå –£–¥–∞–ª–∏—Ç—å" if warehouse['ID'] in user_data[chat_id]['selected_warehouses'] else "‚úÖ –î–æ–±–∞–≤–∏—Ç—å"
        keyboard_builder.button(
            text=f"{action_text} {warehouse['name']}",
            callback_data=f"toggle_warehouse_{warehouse['ID']}"
        )

    # –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
    keyboard_builder.adjust(1)

    inline_keyboard = keyboard_builder.as_markup()

    if user_data[chat_id]['last_message_id'] is None:
        sent_message = await message.answer("üõí –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=inline_keyboard)
        user_data[chat_id]['last_message_id'] = sent_message.message_id
        user_data[chat_id]['last_keyboard'] = inline_keyboard
    else:
        try:
            await bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=user_data[chat_id]['last_message_id'],
                reply_markup=inline_keyboard
            )
            user_data[chat_id]['last_keyboard'] = inline_keyboard
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda call: call.data.startswith("toggle_warehouse_"))
async def process_inline_warehouse_selection(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    warehouse_id = int(callback_query.data.split("_")[2])

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Å–∫–ª–∞–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    if warehouse_id not in user_data[chat_id]['selected_warehouses']:
        user_data[chat_id]['selected_warehouses'].append(warehouse_id)
        await callback_query.answer(f"üì¶ –°–∫–ª–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ.")
    else:
        user_data[chat_id]['selected_warehouses'].remove(warehouse_id)
        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞
        user_data[chat_id]['selected_coefficients'].pop(warehouse_id, None)
        await callback_query.answer(f"üì¶ –°–∫–ª–∞–¥ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    await send_warehouse_selection(chat_id, callback_query.message)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
@dp.message(lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤")
async def confirm_warehouse_selection(message: types.Message):
    chat_id = message.chat.id
    selected_warehouses_ids = user_data[chat_id]['selected_warehouses']

    if selected_warehouses_ids:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
        user_data[chat_id]['current_warehouse_index'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–∫–ª–∞–¥–∞
        await send_coefficient_selection(chat_id, message)
    else:
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
async def send_coefficient_selection(chat_id: int, message: types.Message):
    try:
        warehouse_index = user_data[chat_id]['current_warehouse_index']
        selected_warehouses = user_data[chat_id]['selected_warehouses']

        warehouse_id = selected_warehouses[warehouse_index]
        warehouse = next((w for w in WAREHOUSES if w['ID'] == warehouse_id), {})
        warehouse_name = warehouse.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥')

        keyboard_builder = InlineKeyboardBuilder()

        for coeff in COEFFICIENTS:
            action_text = "‚ùå" if coeff in user_data[chat_id].get('selected_coefficients', {}).get(warehouse_id,
                                                                                                  []) else "‚úÖ"
            keyboard_builder.button(
                text=f"{action_text} {coeff}",
                callback_data=f"toggle_coefficient_{warehouse_id}_{coeff}"
            )

        # –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        keyboard_builder.adjust(2)

        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        navigation_buttons = []

        if warehouse_index > 0:
            back_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_warehouse")
            navigation_buttons.append(back_button)

        if warehouse_index < len(selected_warehouses) - 1:
            next_button = InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_warehouse")
            navigation_buttons.append(next_button)
        else:
            confirm_button = InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤",
                callback_data="confirm_coefficients"
            )
            navigation_buttons.append(confirm_button)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é"
        main_menu_button = InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="main_menu")
        navigation_buttons.append(main_menu_button)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_builder.row(*navigation_buttons)

        inline_keyboard = keyboard_builder.as_markup()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_data[chat_id]['last_message_id'] is None:
            sent_message = await message.answer(
                f"üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–∫–ª–∞–¥–∞ <b>{warehouse_name}</b>:",
                reply_markup=inline_keyboard
            )
            user_data[chat_id]['last_message_id'] = sent_message.message_id
            user_data[chat_id]['last_keyboard'] = inline_keyboard
        else:
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=user_data[chat_id]['last_message_id'],
                    text=f"üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–∫–ª–∞–¥–∞ <b>{warehouse_name}</b>:",
                    reply_markup=inline_keyboard
                )
                user_data[chat_id]['last_keyboard'] = inline_keyboard
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_coefficient_selection: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda call: call.data.startswith("toggle_coefficient_"))
async def process_inline_coefficient_selection(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    data_parts = callback_query.data.split("_")
    warehouse_id = int(data_parts[2])
    coefficient = int(data_parts[3])

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
    selected_coeffs = user_data[chat_id].setdefault('selected_coefficients', {}).setdefault(warehouse_id, [])
    if coefficient not in selected_coeffs:
        selected_coeffs.append(coefficient)
        await callback_query.answer(f"‚ûï –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {coefficient} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        selected_coeffs.remove(coefficient)
        await callback_query.answer(f"‚ûñ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {coefficient} —É–¥–∞–ª–µ–Ω.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    await send_coefficient_selection(chat_id, callback_query.message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda call: call.data in ["next_warehouse", "prev_warehouse", "main_menu"])
async def process_navigation(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    action = callback_query.data

    if action == "next_warehouse":
        warehouse_index = user_data[chat_id]['current_warehouse_index']
        selected_warehouses = user_data[chat_id]['selected_warehouses']
        warehouse_id = selected_warehouses[warehouse_index]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–ª–∞–¥–∞
        selected_coeffs = user_data[chat_id]['selected_coefficients'].get(warehouse_id, [])
        if not selected_coeffs:
            await callback_query.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.", show_alert=True)
            return

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–∫–ª–∞–¥–µ
        if warehouse_index < len(selected_warehouses) - 1:
            user_data[chat_id]['current_warehouse_index'] += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∫–ª–∞–¥—É
            await send_coefficient_selection(chat_id, callback_query.message)
        else:
            await callback_query.answer("–í—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–∫–ª–∞–¥–µ.", show_alert=True)

    elif action == "prev_warehouse":
        if user_data[chat_id]['current_warehouse_index'] > 0:
            user_data[chat_id]['current_warehouse_index'] -= 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–∫–ª–∞–¥—É
            await send_coefficient_selection(chat_id, callback_query.message)
        else:
            await callback_query.answer("–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–º —Å–∫–ª–∞–¥–µ.", show_alert=True)

    elif action == "main_menu":
        await send_main_menu(chat_id, callback_query.message)
        await callback_query.answer("–ü–µ—Ä–µ—à–ª–∏ –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤"
@dp.callback_query(lambda call: call.data == "confirm_coefficients")
async def process_confirm_coefficients(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    warehouse_index = user_data[chat_id]['current_warehouse_index']
    selected_warehouses = user_data[chat_id]['selected_warehouses']
    warehouse_id = selected_warehouses[warehouse_index]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–ª–∞–¥–∞
    selected_coeffs = user_data[chat_id]['selected_coefficients'].get(warehouse_id, [])
    if not selected_coeffs:
        await callback_query.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ª–∏ –≤—Å–µ —Å–∫–ª–∞–¥—ã
    if warehouse_index == len(selected_warehouses) - 1:
        await finalize_selection(chat_id, callback_query.message)
    else:
        # –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∫–ª–∞–¥—É, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π
        user_data[chat_id]['current_warehouse_index'] += 1
        await send_coefficient_selection(chat_id, callback_query.message)


# –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
async def finalize_selection(chat_id: int, message: types.Message):
    selected_warehouses_ids = user_data[chat_id]['selected_warehouses']
    selected_coefficients = user_data[chat_id]['selected_coefficients']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º –≤—ã–±–æ—Ä–æ–º
    response_message = "‚úÖ <b>–í–∞—à –≤—ã–±–æ—Ä:</b>\n"
    for warehouse_id in selected_warehouses_ids:
        warehouse = next((w for w in WAREHOUSES if w['ID'] == warehouse_id), {})
        warehouse_name = warehouse.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥')
        coeffs = selected_coefficients.get(warehouse_id, [])
        coeffs_text = ", ".join(map(str, coeffs)) if coeffs else "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤"
        response_message += f"\nüè¢ <b>{warehouse_name}</b>\nüî¢ <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b> {coeffs_text}\n"

    await message.answer(response_message, parse_mode=ParseMode.HTML)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    user_data[chat_id]['setup_complete'] = True

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    if user_data[chat_id]['last_message_id']:
        try:
            await bot.delete_message(chat_id, user_data[chat_id]['last_message_id'])
            user_data[chat_id]['last_message_id'] = None
            user_data[chat_id]['last_keyboard'] = None
            user_data[chat_id]['current_warehouse_index'] = 0
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤
    change_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∫–ª–∞–¥—ã")]],
        resize_keyboard=True
    )
    await message.answer("üìù –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤.",
                         reply_markup=change_keyboard)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
@dp.message(lambda message: message.text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∫–ª–∞–¥—ã")
async def change_warehouse_selection(message: types.Message):
    chat_id = message.chat.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    user_data[chat_id]['selected_coefficients'] = {}
    user_data[chat_id]['current_warehouse_index'] = 0
    user_data[chat_id]['setup_complete'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
    await send_warehouse_selection(chat_id, message)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤")]],
        resize_keyboard=True
    )
    await message.answer("üìã –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤.", reply_markup=confirm_keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ì–ª–∞–≤–Ω–æ–≥–æ –ú–µ–Ω—é
async def send_main_menu(chat_id: int, message: types.Message):
    main_menu_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∫–ª–∞–¥—ã")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    await bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é:", reply_markup=main_menu_keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_coefficients_for_user(chat_id: int, data: dict, coefficients: list):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    if not data.get('setup_complete', False):
        return  # –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã

    selected_warehouses = data.get('selected_warehouses', [])
    selected_coefficients = data.get('selected_coefficients', {})
    known_coeffs = data.setdefault('known_coeffs', {})

    new_or_changed_coeffs_found = False

    for coefficient in coefficients:
        warehouse_id = coefficient['warehouseID']
        date = coefficient['date'].split("T")[0]
        coeff_value = coefficient['coefficient']

        if warehouse_id in selected_warehouses:
            if coeff_value in selected_coefficients.get(warehouse_id, []):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–æ–≤—ã–π –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                known_coeffs_warehouse = known_coeffs.setdefault(warehouse_id, {})
                previous_coeff_value = known_coeffs_warehouse.get(date)

                if previous_coeff_value is None:
                    # –ù–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                    warehouse = next((w for w in WAREHOUSES if w['ID'] == warehouse_id), {})
                    message_text = (
                        f"üì¢ <b>–ù–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç!</b>\n"
                        f"üè¢ <b>–°–∫–ª–∞–¥:</b> {warehouse.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥')}\n"
                        f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"
                        f"üìä <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {coeff_value}\n"
                        f"üì¶ <b>–¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {coefficient['boxTypeName']}\n\n"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ
                    await send_long_message(chat_id, message_text)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                    known_coeffs_warehouse[date] = coeff_value
                    new_or_changed_coeffs_found = True

                elif previous_coeff_value != coeff_value:
                    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
                    warehouse = next((w for w in WAREHOUSES if w['ID'] == warehouse_id), {})
                    message_text = (
                        f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞!</b>\n"
                        f"üè¢ <b>–°–∫–ª–∞–¥:</b> {warehouse.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥')}\n"
                        f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"
                        f"üìä <b>–°—Ç–∞—Ä—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {previous_coeff_value}\n"
                        f"üìä <b>–ù–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {coeff_value}\n"
                        f"üì¶ <b>–¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {coefficient['boxTypeName']}\n\n"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
                    await send_long_message(chat_id, message_text)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                    known_coeffs_warehouse[date] = coeff_value
                    new_or_changed_coeffs_found = True

    if not new_or_changed_coeffs_found:
        logging.info(f"No new or changed coefficients for chat {chat_id}.")


# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
async def periodic_check():
    while True:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID —Å–∫–ª–∞–¥–æ–≤
        all_warehouse_ids = set()
        for data in user_data.values():
            all_warehouse_ids.update(data.get('selected_warehouses', []))

        if all_warehouse_ids:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ API –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
                coefficients = get_acceptance_coefficients(list(all_warehouse_ids))
                if coefficients:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    for chat_id, data in user_data.items():
                        await process_coefficients_for_user(chat_id, data, coefficients)
                else:
                    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ API.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        else:
            logging.info("–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∫–ª–∞–¥–æ–≤.")

        await asyncio.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Å—Ç—è–º, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
async def send_long_message(chat_id: int, text: str):
    if len(text) <= MAX_MESSAGE_LENGTH:
        await bot.send_message(chat_id, text, parse_mode=ParseMode.HTML)
    else:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        for i in range(0, len(text), MAX_MESSAGE_LENGTH):
            await bot.send_message(chat_id, text[i:i + MAX_MESSAGE_LENGTH], parse_mode=ParseMode.HTML)


# –ö–æ–º–∞–Ω–¥–∞ /history –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
@dp.message(Command("history"))
async def show_history(message: types.Message):
    chat_id = message.chat.id
    history = user_data.get(chat_id, {}).get('known_coeffs', {})

    if not history:
        await message.answer("üîç –ò—Å—Ç–æ—Ä–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞.")
        return

    response_message = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:</b>\n\n"
    for warehouse_id, dates in history.items():
        warehouse = next((w for w in WAREHOUSES if w['ID'] == warehouse_id), {})
        warehouse_name = warehouse.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥')

        response_message += f"üè¢ <b>{warehouse_name}</b>\n"
        for date, coeff_value in dates.items():
            response_message += f"üìÖ <b>–î–∞—Ç–∞:</b> {date} | üìä <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {coeff_value}\n"
        response_message += "\n"

    await send_long_message(chat_id, response_message)


# –ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
@dp.message(Command("help"))
async def show_help(message: types.Message):
    response_message = (
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üü¢ /start - –Ω–∞—á–∞—Ç—å –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
        "üìú /history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤.\n"
        "‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö.\n"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.answer(response_message, parse_mode=ParseMode.HTML)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ì–ª–∞–≤–Ω–æ–≥–æ –ú–µ–Ω—é
@dp.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
async def history_button(message: types.Message):
    await show_history(message)


@dp.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_button(message: types.Message):
    await show_help(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é" —á–µ—Ä–µ–∑ Callback Query
@dp.callback_query(lambda call: call.data == "main_menu")
async def handle_main_menu(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    await send_main_menu(chat_id, callback_query.message)
    await callback_query.answer("–ü–µ—Ä–µ—à–ª–∏ –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é.")


async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.create_task(periodic_check())
    try:
        await dp.start_polling(bot, skip_updates=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
        logging.error("Traceback:\n%s", traceback.format_exc())  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –≤ —Ñ–∞–π–ª


if __name__ == '__main__':
    while True:
        try:
            asyncio.run(main())
        except Exception as main_e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –±–æ—Ç —É–ø–∞–ª: {main_e}")
            logging.error("Traceback:\n%s", traceback.format_exc())  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –≤ —Ñ–∞–π–ª
            # –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            time.sleep(5)
            logging.info("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            continue
        # –ï—Å–ª–∏ main –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        break
